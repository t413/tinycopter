
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000d04  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080010e  0080010e  00000da6  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001f0  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000324  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000016ba  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008b8  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013fb  00000000  00000000  00003936  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000300  00000000  00000000  00004d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000556  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e7f  00000000  00000000  0000558a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000278  00000000  00000000  00006409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		}
		UEINTX = 0x3A;
		debug_flush_timer = 0;
	}
	SREG = intr_state;
}
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
	//sei();
}

// Receive a byte
uint8_t uart_getchar(void)
{
   2:	00 00       	nop
    tfp_format(stdout_putp,stdout_putf,fmt,va);
    va_end(va);
}

static void putcp(void* p,char c)
{
   4:	c2 c0       	rjmp	.+388    	; 0x18a <__bad_interrupt>
    OCR1A   = 32000;
}

volatile unsigned long timer0_overflow_count = 0;

void timer0_init(void){
   6:	00 00       	nop
   8:	c0 c0       	rjmp	.+384    	; 0x18a <__bad_interrupt>
   a:	00 00       	nop
   c:	be c0       	rjmp	.+380    	; 0x18a <__bad_interrupt>
   e:	00 00       	nop
  10:	bc c0       	rjmp	.+376    	; 0x18a <__bad_interrupt>
  12:	00 00       	nop
  14:	ba c0       	rjmp	.+372    	; 0x18a <__bad_interrupt>
  16:	00 00       	nop
  18:	b8 c0       	rjmp	.+368    	; 0x18a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b6 c0       	rjmp	.+364    	; 0x18a <__bad_interrupt>
  1e:	00 00       	nop
  20:	b4 c0       	rjmp	.+360    	; 0x18a <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c5       	rjmp	.+2786   	; 0xb08 <__vector_9>
  26:	00 00       	nop
  28:	b0 c0       	rjmp	.+352    	; 0x18a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	23 c1       	rjmp	.+582    	; 0x274 <__vector_11>
  2e:	00 00       	nop
  30:	61 c1       	rjmp	.+706    	; 0x2f4 <__vector_12>
  32:	00 00       	nop
  34:	aa c0       	rjmp	.+340    	; 0x18a <__bad_interrupt>
  36:	00 00       	nop
  38:	a8 c0       	rjmp	.+336    	; 0x18a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	0e c5       	rjmp	.+2588   	; 0xa5a <__vector_15>
  3e:	00 00       	nop
  40:	a4 c0       	rjmp	.+328    	; 0x18a <__bad_interrupt>
  42:	00 00       	nop
  44:	a2 c0       	rjmp	.+324    	; 0x18a <__bad_interrupt>
  46:	00 00       	nop
  48:	a0 c0       	rjmp	.+320    	; 0x18a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9e c0       	rjmp	.+316    	; 0x18a <__bad_interrupt>
  4e:	00 00       	nop
  50:	9c c0       	rjmp	.+312    	; 0x18a <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c5       	rjmp	.+2610   	; 0xa88 <__vector_21>
  56:	00 00       	nop
  58:	98 c0       	rjmp	.+304    	; 0x18a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	12 c3       	rjmp	.+1572   	; 0x682 <__vector_23>
  5e:	00 00       	nop
  60:	e5 c2       	rjmp	.+1482   	; 0x62c <__vector_24>
  62:	00 00       	nop
  64:	92 c0       	rjmp	.+292    	; 0x18a <__bad_interrupt>
  66:	00 00       	nop
  68:	90 c0       	rjmp	.+288    	; 0x18a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8e c0       	rjmp	.+284    	; 0x18a <__bad_interrupt>
  6e:	00 00       	nop
  70:	8c c0       	rjmp	.+280    	; 0x18a <__bad_interrupt>
  72:	00 00       	nop
  74:	8a c0       	rjmp	.+276    	; 0x18a <__bad_interrupt>
  76:	00 00       	nop
  78:	88 c0       	rjmp	.+272    	; 0x18a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	86 c0       	rjmp	.+268    	; 0x18a <__bad_interrupt>
  7e:	00 00       	nop
  80:	84 c0       	rjmp	.+264    	; 0x18a <__bad_interrupt>
  82:	00 00       	nop
  84:	82 c0       	rjmp	.+260    	; 0x18a <__bad_interrupt>
  86:	00 00       	nop
  88:	80 c0       	rjmp	.+256    	; 0x18a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7e c0       	rjmp	.+252    	; 0x18a <__bad_interrupt>
  8e:	00 00       	nop
  90:	7c c0       	rjmp	.+248    	; 0x18a <__bad_interrupt>
  92:	00 00       	nop
  94:	7a c0       	rjmp	.+244    	; 0x18a <__bad_interrupt>
  96:	00 00       	nop

00000098 <descriptor_list>:
  98:	00 01 00 00 cf 00 12 00 02 00 00 e1 00 22 00 22     ............."."
  a8:	00 00 03 01 15 00 21 00 00 f3 00 09 00 03 00 00     ......!.........
  b8:	18 01 04 01 03 09 04 1c 01 14 02 03 09 04 32 01     ..............2.
  c8:	20                                                   

000000c9 <endpoint_config_table>:
  c9:	00 00 01 c1 26 00                                   ....&.

000000cf <device_descriptor>:
  cf:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
  df:	00 01                                               ..

000000e1 <config1_descriptor>:
  e1:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  f1:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 101:	00 01                                               ..

00000103 <hid_report_descriptor>:
 103:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 113:	09 75 81 02 c0                                      .u...

00000118 <string0>:
 118:	04 03 09 04                                         ....

0000011c <string1>:
 11c:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 12c:	6d 00 65 00 00 00                                   m.e...

00000132 <string2>:
 132:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 142:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 152:	00 00                                               ..

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d2 e0       	ldi	r29, 0x02	; 2
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	a0 e0       	ldi	r26, 0x00	; 0
 164:	b1 e0       	ldi	r27, 0x01	; 1
 166:	e4 e0       	ldi	r30, 0x04	; 4
 168:	fd e0       	ldi	r31, 0x0D	; 13
 16a:	02 c0       	rjmp	.+4      	; 0x170 <.do_copy_data_start>

0000016c <.do_copy_data_loop>:
 16c:	05 90       	lpm	r0, Z+
 16e:	0d 92       	st	X+, r0

00000170 <.do_copy_data_start>:
 170:	ae 30       	cpi	r26, 0x0E	; 14
 172:	b1 07       	cpc	r27, r17
 174:	d9 f7       	brne	.-10     	; 0x16c <.do_copy_data_loop>

00000176 <__do_clear_bss>:
 176:	11 e0       	ldi	r17, 0x01	; 1
 178:	ae e0       	ldi	r26, 0x0E	; 14
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	01 c0       	rjmp	.+2      	; 0x180 <.do_clear_bss_start>

0000017e <.do_clear_bss_loop>:
 17e:	1d 92       	st	X+, r1

00000180 <.do_clear_bss_start>:
 180:	a3 3a       	cpi	r26, 0xA3	; 163
 182:	b1 07       	cpc	r27, r17
 184:	e1 f7       	brne	.-8      	; 0x17e <.do_clear_bss_loop>
 186:	02 d0       	rcall	.+4      	; 0x18c <main>
 188:	bb c5       	rjmp	.+2934   	; 0xd00 <_exit>

0000018a <__bad_interrupt>:
 18a:	3a cf       	rjmp	.-396    	; 0x0 <__vectors>

0000018c <main>:
//#include "print.h"
#define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
void putc ( void* p, char c) { uart_putchar(c); }

int main(void)
{
 18c:	4f 92       	push	r4
 18e:	5f 92       	push	r5
 190:	6f 92       	push	r6
 192:	7f 92       	push	r7
 194:	8f 92       	push	r8
 196:	9f 92       	push	r9
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	//timer0_init();
	timer1_init();
 1ac:	44 d4       	rcall	.+2184   	; 0xa36 <timer1_init>
	uart_init(115200);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	72 ec       	ldi	r23, 0xC2	; 194
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	f9 d1       	rcall	.+1010   	; 0x5aa <uart_init>
	init_printf((void*)0,putc);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	68 e3       	ldi	r22, 0x38	; 56
 1be:	71 e0       	ldi	r23, 0x01	; 1
 1c0:	1c d4       	rcall	.+2104   	; 0x9fa <init_printf>
	CPU_PRESCALE(0); // set for 16 MHz clock
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	80 93 61 00 	sts	0x0061, r24
 1c8:	10 92 61 00 	sts	0x0061, r1
	//DDRB = 0xFF;
	PORTB = 0x00;
 1cc:	15 b8       	out	0x05, r1	; 5
 1ce:	cc 24       	eor	r12, r12
 1d0:	dd 24       	eor	r13, r13
 1d2:	aa 24       	eor	r10, r10
 1d4:	bb 24       	eor	r11, r11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d6:	30 e9       	ldi	r19, 0x90	; 144
 1d8:	43 2e       	mov	r4, r19
 1da:	31 e0       	ldi	r19, 0x01	; 1
 1dc:	53 2e       	mov	r5, r19
	uint16_t last_print = 0;
	uint16_t last_led = 0;
	
	while (1) {
		_delay_ms(100);
        printf("LOL");
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	62 2e       	mov	r6, r18
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	72 2e       	mov	r7, r18
        uint16_t c = tics() >> 14;
		if ((c - last_print) > 1000){
			printf("at %d\n\r", c);
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	89 2e       	mov	r8, r25
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	99 2e       	mov	r9, r25
	timer1_init();
	uart_init(115200);
	init_printf((void*)0,putc);
	CPU_PRESCALE(0); // set for 16 MHz clock
	//DDRB = 0xFF;
	PORTB = 0x00;
 1ee:	88 ee       	ldi	r24, 0xE8	; 232
 1f0:	93 e0       	ldi	r25, 0x03	; 3
 1f2:	f2 01       	movw	r30, r4
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x68>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <main+0x66>
	uint16_t last_print = 0;
	uint16_t last_led = 0;
	
	while (1) {
		_delay_ms(100);
        printf("LOL");
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <main+0x72>
 1fe:	ad b7       	in	r26, 0x3d	; 61
 200:	be b7       	in	r27, 0x3e	; 62
 202:	12 96       	adiw	r26, 0x02	; 2
 204:	7c 92       	st	X, r7
 206:	6e 92       	st	-X, r6
 208:	11 97       	sbiw	r26, 0x01	; 1
 20a:	00 d4       	rcall	.+2048   	; 0xa0c <tfp_printf>
        uint16_t c = tics() >> 14;
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	65 d4       	rcall	.+2250   	; 0xadc <tics>
 212:	7b 01       	movw	r14, r22
 214:	8c 01       	movw	r16, r24
 216:	8e e0       	ldi	r24, 0x0E	; 14
 218:	16 95       	lsr	r17
 21a:	07 95       	ror	r16
 21c:	f7 94       	ror	r15
 21e:	e7 94       	ror	r14
 220:	8a 95       	dec	r24
 222:	d1 f7       	brne	.-12     	; 0x218 <main+0x8c>
 224:	e7 01       	movw	r28, r14
		if ((c - last_print) > 1000){
 226:	c7 01       	movw	r24, r14
 228:	8c 19       	sub	r24, r12
 22a:	9d 09       	sbc	r25, r13
 22c:	89 5e       	subi	r24, 0xE9	; 233
 22e:	93 40       	sbci	r25, 0x03	; 3
 230:	98 f0       	brcs	.+38     	; 0x258 <main+0xcc>
			printf("at %d\n\r", c);
 232:	00 d0       	rcall	.+0      	; 0x234 <main+0xa8>
 234:	00 d0       	rcall	.+0      	; 0x236 <main+0xaa>
 236:	ed b7       	in	r30, 0x3d	; 61
 238:	fe b7       	in	r31, 0x3e	; 62
 23a:	31 96       	adiw	r30, 0x01	; 1
 23c:	ad b7       	in	r26, 0x3d	; 61
 23e:	be b7       	in	r27, 0x3e	; 62
 240:	12 96       	adiw	r26, 0x02	; 2
 242:	9c 92       	st	X, r9
 244:	8e 92       	st	-X, r8
 246:	11 97       	sbiw	r26, 0x01	; 1
 248:	f3 82       	std	Z+3, r15	; 0x03
 24a:	e2 82       	std	Z+2, r14	; 0x02
 24c:	df d3       	rcall	.+1982   	; 0xa0c <tfp_printf>
 24e:	67 01       	movw	r12, r14
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
			last_print = c;
		}
		if ((c - last_led) > 100){
 258:	ce 01       	movw	r24, r28
 25a:	8a 19       	sub	r24, r10
 25c:	9b 09       	sbc	r25, r11
 25e:	85 36       	cpi	r24, 0x65	; 101
 260:	91 05       	cpc	r25, r1
 262:	08 f4       	brcc	.+2      	; 0x266 <main+0xda>
 264:	c4 cf       	rjmp	.-120    	; 0x1ee <main+0x62>
			PORTB = ~PORTB;
 266:	85 b1       	in	r24, 0x05	; 5
 268:	80 95       	com	r24
 26a:	85 b9       	out	0x05, r24	; 5
 26c:	5e 01       	movw	r10, r28
 26e:	bf cf       	rjmp	.-130    	; 0x1ee <main+0x62>

00000270 <putc>:
#include "uart.h"
#include "timers.h"
//#include "usb_debug_only.h"
//#include "print.h"
#define CPU_PRESCALE(n)	(CLKPR = 0x80, CLKPR = (n))
void putc ( void* p, char c) { uart_putchar(c); }
 270:	86 2f       	mov	r24, r22
 272:	c6 c1       	rjmp	.+908    	; 0x600 <uart_putchar>

00000274 <__vector_11>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 282:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 286:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 28a:	98 2f       	mov	r25, r24
 28c:	83 ff       	sbrs	r24, 3
 28e:	0f c0       	rjmp	.+30     	; 0x2ae <__vector_11+0x3a>
		UENUM = 0;
 290:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 29a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 29e:	82 e2       	ldi	r24, 0x22	; 34
 2a0:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 2aa:	10 92 0e 01 	sts	0x010E, r1
        }
	if (intbits & (1<<SOFI)) {
 2ae:	92 ff       	sbrs	r25, 2
 2b0:	1a c0       	rjmp	.+52     	; 0x2e6 <__vector_11+0x72>
		if (usb_configuration) {
 2b2:	80 91 0e 01 	lds	r24, 0x010E
 2b6:	88 23       	and	r24, r24
 2b8:	b1 f0       	breq	.+44     	; 0x2e6 <__vector_11+0x72>
			t = debug_flush_timer;
 2ba:	80 91 0f 01 	lds	r24, 0x010F
			if (t) {
 2be:	88 23       	and	r24, r24
 2c0:	91 f0       	breq	.+36     	; 0x2e6 <__vector_11+0x72>
				debug_flush_timer = -- t;
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	80 93 0f 01 	sts	0x010F, r24
				if (!t) {
 2c8:	88 23       	and	r24, r24
 2ca:	69 f4       	brne	.+26     	; 0x2e6 <__vector_11+0x72>
					UENUM = DEBUG_TX_ENDPOINT;
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 e9 00 	sts	0x00E9, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <__vector_11+0x64>
					while ((UEINTX & (1<<RWAL))) {
						UEDATX = 0;
 2d4:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 2d8:	80 91 e8 00 	lds	r24, 0x00E8
 2dc:	85 fd       	sbrc	r24, 5
 2de:	fa cf       	rjmp	.-12     	; 0x2d4 <__vector_11+0x60>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 2e0:	8a e3       	ldi	r24, 0x3A	; 58
 2e2:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_12>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 31a:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 31e:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 322:	83 ff       	sbrs	r24, 3
 324:	2c c1       	rjmp	.+600    	; 0x57e <__stack+0x27f>
                bmRequestType = UEDATX;
 326:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 32a:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 32e:	80 91 f1 00 	lds	r24, 0x00F1
 332:	a8 2f       	mov	r26, r24
 334:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 336:	20 91 f1 00 	lds	r18, 0x00F1
 33a:	92 2f       	mov	r25, r18
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	a8 2b       	or	r26, r24
 340:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 342:	80 91 f1 00 	lds	r24, 0x00F1
 346:	68 2f       	mov	r22, r24
 348:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 34a:	20 91 f1 00 	lds	r18, 0x00F1
 34e:	92 2f       	mov	r25, r18
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	68 2b       	or	r22, r24
 354:	79 2b       	or	r23, r25
                wLength = UEDATX;
 356:	80 91 f1 00 	lds	r24, 0x00F1
 35a:	c8 2f       	mov	r28, r24
 35c:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 35e:	20 91 f1 00 	lds	r18, 0x00F1
 362:	92 2f       	mov	r25, r18
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	c8 2b       	or	r28, r24
 368:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 36a:	82 ef       	ldi	r24, 0xF2	; 242
 36c:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 370:	36 30       	cpi	r19, 0x06	; 6
 372:	09 f0       	breq	.+2      	; 0x376 <__stack+0x77>
 374:	56 c0       	rjmp	.+172    	; 0x422 <__stack+0x123>
 376:	2f e9       	ldi	r18, 0x9F	; 159
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	a9 01       	movw	r20, r18
 37c:	45 50       	subi	r20, 0x05	; 5
 37e:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 380:	f9 01       	movw	r30, r18
 382:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 384:	85 91       	lpm	r24, Z+
 386:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 388:	8a 17       	cp	r24, r26
 38a:	9b 07       	cpc	r25, r27
 38c:	e1 f4       	brne	.+56     	; 0x3c6 <__stack+0xc7>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 38e:	fa 01       	movw	r30, r20
 390:	85 91       	lpm	r24, Z+
 392:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 394:	86 17       	cp	r24, r22
 396:	97 07       	cpc	r25, r23
 398:	b1 f4       	brne	.+44     	; 0x3c6 <__stack+0xc7>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 39a:	9a 01       	movw	r18, r20
 39c:	2e 5f       	subi	r18, 0xFE	; 254
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 3a0:	f9 01       	movw	r30, r18
 3a2:	65 91       	lpm	r22, Z+
 3a4:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 3a6:	2e 5f       	subi	r18, 0xFE	; 254
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	f9 01       	movw	r30, r18
 3ac:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 3ae:	ce 01       	movw	r24, r28
 3b0:	cf 3f       	cpi	r28, 0xFF	; 255
 3b2:	d1 05       	cpc	r29, r1
 3b4:	19 f0       	breq	.+6      	; 0x3bc <__stack+0xbd>
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <__stack+0xbd>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	42 2f       	mov	r20, r18
 3be:	82 17       	cp	r24, r18
 3c0:	58 f4       	brcc	.+22     	; 0x3d8 <__stack+0xd9>
 3c2:	48 2f       	mov	r20, r24
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <__stack+0xd9>
 3c6:	29 5f       	subi	r18, 0xF9	; 249
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	49 5f       	subi	r20, 0xF9	; 249
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	20 3d       	cpi	r18, 0xD0	; 208
 3d2:	3f 07       	cpc	r19, r31
 3d4:	a9 f6       	brne	.-86     	; 0x380 <__stack+0x81>
 3d6:	d3 c0       	rjmp	.+422    	; 0x57e <__stack+0x27f>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 3d8:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 3da:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	c9 01       	movw	r24, r18
 3e4:	85 70       	andi	r24, 0x05	; 5
 3e6:	90 70       	andi	r25, 0x00	; 0
 3e8:	89 2b       	or	r24, r25
 3ea:	b9 f3       	breq	.-18     	; 0x3da <__stack+0xdb>
				if (i & (1<<RXOUTI)) return;	// abort
 3ec:	22 fd       	sbrc	r18, 2
 3ee:	ca c0       	rjmp	.+404    	; 0x584 <__stack+0x285>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 3f0:	34 2f       	mov	r19, r20
 3f2:	41 32       	cpi	r20, 0x21	; 33
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__stack+0xf9>
 3f6:	30 e2       	ldi	r19, 0x20	; 32
 3f8:	23 2f       	mov	r18, r19
 3fa:	cb 01       	movw	r24, r22
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__stack+0x10b>
				for (i = n; i; i--) {
 3fe:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	e4 91       	lpm	r30, Z+
 404:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	22 23       	and	r18, r18
 40c:	c1 f7       	brne	.-16     	; 0x3fe <__stack+0xff>
 40e:	63 0f       	add	r22, r19
 410:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 412:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 414:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 418:	44 23       	and	r20, r20
 41a:	f9 f6       	brne	.-66     	; 0x3da <__stack+0xdb>
 41c:	30 32       	cpi	r19, 0x20	; 32
 41e:	e9 f2       	breq	.-70     	; 0x3da <__stack+0xdb>
 420:	b1 c0       	rjmp	.+354    	; 0x584 <__stack+0x285>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 422:	35 30       	cpi	r19, 0x05	; 5
 424:	61 f4       	brne	.+24     	; 0x43e <__stack+0x13f>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 426:	8e ef       	ldi	r24, 0xFE	; 254
 428:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 42c:	80 91 e8 00 	lds	r24, 0x00E8
 430:	80 ff       	sbrs	r24, 0
 432:	fc cf       	rjmp	.-8      	; 0x42c <__stack+0x12d>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 434:	8a 2f       	mov	r24, r26
 436:	80 68       	ori	r24, 0x80	; 128
 438:	80 93 e3 00 	sts	0x00E3, r24
 43c:	a3 c0       	rjmp	.+326    	; 0x584 <__stack+0x285>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 43e:	39 30       	cpi	r19, 0x09	; 9
 440:	31 f5       	brne	.+76     	; 0x48e <__stack+0x18f>
 442:	44 23       	and	r20, r20
 444:	09 f0       	breq	.+2      	; 0x448 <__stack+0x149>
 446:	9b c0       	rjmp	.+310    	; 0x57e <__stack+0x27f>
			usb_configuration = wValue;
 448:	a0 93 0e 01 	sts	0x010E, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 44c:	8e ef       	ldi	r24, 0xFE	; 254
 44e:	80 93 e8 00 	sts	0x00E8, r24
 452:	89 ec       	ldi	r24, 0xC9	; 201
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 458:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 45c:	fc 01       	movw	r30, r24
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	e4 91       	lpm	r30, Z+
				UECONX = en;
 462:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 466:	ee 23       	and	r30, r30
 468:	69 f0       	breq	.+26     	; 0x484 <__stack+0x185>
					UECFG0X = pgm_read_byte(cfg++);
 46a:	ac 01       	movw	r20, r24
 46c:	4f 5f       	subi	r20, 0xFF	; 255
 46e:	5f 4f       	sbci	r21, 0xFF	; 255
 470:	fc 01       	movw	r30, r24
 472:	84 91       	lpm	r24, Z+
 474:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 478:	ca 01       	movw	r24, r20
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	fa 01       	movw	r30, r20
 47e:	34 91       	lpm	r19, Z+
 480:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 484:	2f 5f       	subi	r18, 0xFF	; 255
 486:	25 30       	cpi	r18, 0x05	; 5
 488:	39 f7       	brne	.-50     	; 0x458 <__stack+0x159>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 48a:	8e e1       	ldi	r24, 0x1E	; 30
 48c:	4d c0       	rjmp	.+154    	; 0x528 <__stack+0x229>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 48e:	38 30       	cpi	r19, 0x08	; 8
 490:	61 f4       	brne	.+24     	; 0x4aa <__stack+0x1ab>
 492:	40 38       	cpi	r20, 0x80	; 128
 494:	09 f0       	breq	.+2      	; 0x498 <__stack+0x199>
 496:	73 c0       	rjmp	.+230    	; 0x57e <__stack+0x27f>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 498:	80 91 e8 00 	lds	r24, 0x00E8
 49c:	80 ff       	sbrs	r24, 0
 49e:	fc cf       	rjmp	.-8      	; 0x498 <__stack+0x199>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 4a0:	80 91 0e 01 	lds	r24, 0x010E
 4a4:	80 93 f1 00 	sts	0x00F1, r24
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <__stack+0x1e1>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 4aa:	33 23       	and	r19, r19
 4ac:	e9 f4       	brne	.+58     	; 0x4e8 <__stack+0x1e9>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4ae:	80 91 e8 00 	lds	r24, 0x00E8
 4b2:	80 ff       	sbrs	r24, 0
 4b4:	fc cf       	rjmp	.-8      	; 0x4ae <__stack+0x1af>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 4b6:	42 38       	cpi	r20, 0x82	; 130
 4b8:	11 f0       	breq	.+4      	; 0x4be <__stack+0x1bf>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <__stack+0x1d9>
				UENUM = wIndex;
 4be:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 4c2:	80 91 eb 00 	lds	r24, 0x00EB
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	25 e0       	ldi	r18, 0x05	; 5
 4ca:	96 95       	lsr	r25
 4cc:	87 95       	ror	r24
 4ce:	2a 95       	dec	r18
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <__stack+0x1cb>
 4d2:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 4d4:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 4d8:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 4dc:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 4e0:	8e ef       	ldi	r24, 0xFE	; 254
 4e2:	80 93 e8 00 	sts	0x00E8, r24
 4e6:	4e c0       	rjmp	.+156    	; 0x584 <__stack+0x285>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 4e8:	31 30       	cpi	r19, 0x01	; 1
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <__stack+0x1f3>
 4ec:	33 30       	cpi	r19, 0x03	; 3
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__stack+0x1f3>
 4f0:	46 c0       	rjmp	.+140    	; 0x57e <__stack+0x27f>
 4f2:	42 30       	cpi	r20, 0x02	; 2
 4f4:	f1 f4       	brne	.+60     	; 0x532 <__stack+0x233>
 4f6:	ab 2b       	or	r26, r27
 4f8:	e1 f4       	brne	.+56     	; 0x532 <__stack+0x233>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 4fa:	26 2f       	mov	r18, r22
 4fc:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 4fe:	82 2f       	mov	r24, r18
 500:	81 50       	subi	r24, 0x01	; 1
 502:	84 30       	cpi	r24, 0x04	; 4
 504:	b0 f4       	brcc	.+44     	; 0x532 <__stack+0x233>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 506:	8e ef       	ldi	r24, 0xFE	; 254
 508:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 50c:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 510:	33 30       	cpi	r19, 0x03	; 3
 512:	a9 f1       	breq	.+106    	; 0x57e <__stack+0x27f>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 514:	89 e1       	ldi	r24, 0x19	; 25
 516:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__stack+0x225>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	2a 95       	dec	r18
 526:	e2 f7       	brpl	.-8      	; 0x520 <__stack+0x221>
 528:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 52c:	10 92 ea 00 	sts	0x00EA, r1
 530:	29 c0       	rjmp	.+82     	; 0x584 <__stack+0x285>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 532:	31 30       	cpi	r19, 0x01	; 1
 534:	21 f5       	brne	.+72     	; 0x57e <__stack+0x27f>
 536:	41 3a       	cpi	r20, 0xA1	; 161
 538:	11 f5       	brne	.+68     	; 0x57e <__stack+0x27f>
			if (wIndex == 0) {
 53a:	67 2b       	or	r22, r23
 53c:	01 f5       	brne	.+64     	; 0x57e <__stack+0x27f>
				len = wLength;
 53e:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 540:	5e ef       	ldi	r21, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 542:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	c9 01       	movw	r24, r18
 54c:	85 70       	andi	r24, 0x05	; 5
 54e:	90 70       	andi	r25, 0x00	; 0
 550:	89 2b       	or	r24, r25
 552:	b9 f3       	breq	.-18     	; 0x542 <__stack+0x243>
					if (i & (1<<RXOUTI)) return;	// abort
 554:	22 fd       	sbrc	r18, 2
 556:	16 c0       	rjmp	.+44     	; 0x584 <__stack+0x285>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 558:	94 2f       	mov	r25, r20
 55a:	41 32       	cpi	r20, 0x21	; 33
 55c:	08 f0       	brcs	.+2      	; 0x560 <__stack+0x261>
 55e:	90 e2       	ldi	r25, 0x20	; 32
 560:	89 2f       	mov	r24, r25
 562:	03 c0       	rjmp	.+6      	; 0x56a <__stack+0x26b>
					for (i = n; i; i--) {
						UEDATX = 0;
 564:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 568:	81 50       	subi	r24, 0x01	; 1
 56a:	88 23       	and	r24, r24
 56c:	d9 f7       	brne	.-10     	; 0x564 <__stack+0x265>
						UEDATX = 0;
					}
					len -= n;
 56e:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 570:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 574:	44 23       	and	r20, r20
 576:	29 f7       	brne	.-54     	; 0x542 <__stack+0x243>
 578:	90 32       	cpi	r25, 0x20	; 32
 57a:	19 f3       	breq	.-58     	; 0x542 <__stack+0x243>
 57c:	03 c0       	rjmp	.+6      	; 0x584 <__stack+0x285>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 57e:	81 e2       	ldi	r24, 0x21	; 33
 580:	80 93 eb 00 	sts	0x00EB, r24
}
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <uart_init>:
static volatile uint8_t rx_buffer_head;
static volatile uint8_t rx_buffer_tail;

// Initialize the UART
void uart_init(uint32_t baud)
{
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
	cli();
 5ae:	f8 94       	cli
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	79 e0       	ldi	r23, 0x09	; 9
 5b4:	8d e3       	ldi	r24, 0x3D	; 61
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	81 d3       	rcall	.+1794   	; 0xcbc <__udivmodsi4>
 5ba:	21 50       	subi	r18, 0x01	; 1
 5bc:	30 40       	sbci	r19, 0x00	; 0
 5be:	40 40       	sbci	r20, 0x00	; 0
 5c0:	50 40       	sbci	r21, 0x00	; 0
 5c2:	56 95       	lsr	r21
 5c4:	47 95       	ror	r20
 5c6:	37 95       	ror	r19
 5c8:	27 95       	ror	r18
 5ca:	30 93 cd 00 	sts	0x00CD, r19
 5ce:	20 93 cc 00 	sts	0x00CC, r18
	UCSR1A = (1<<U2X1);
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
 5d8:	88 e9       	ldi	r24, 0x98	; 152
 5da:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
 5de:	86 e0       	ldi	r24, 0x06	; 6
 5e0:	80 93 ca 00 	sts	0x00CA, r24
	tx_buffer_head = tx_buffer_tail = 0;
 5e4:	10 92 3a 01 	sts	0x013A, r1
 5e8:	80 91 3a 01 	lds	r24, 0x013A
 5ec:	80 93 39 01 	sts	0x0139, r24
	rx_buffer_head = rx_buffer_tail = 0;
 5f0:	10 92 7c 01 	sts	0x017C, r1
 5f4:	80 91 7c 01 	lds	r24, 0x017C
 5f8:	80 93 7b 01 	sts	0x017B, r24
	sei();
 5fc:	78 94       	sei
}
 5fe:	08 95       	ret

00000600 <uart_putchar>:

// Transmit a byte
void uart_putchar(uint8_t c)
{
 600:	28 2f       	mov	r18, r24
	uint8_t i;

	i = tx_buffer_head + 1;
 602:	90 91 39 01 	lds	r25, 0x0139
 606:	9f 5f       	subi	r25, 0xFF	; 255
	if (i >= TX_BUFFER_SIZE) i = 0;
 608:	98 32       	cpi	r25, 0x28	; 40
 60a:	08 f0       	brcs	.+2      	; 0x60e <uart_putchar+0xe>
 60c:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == i) ; // wait until space in buffer
 60e:	80 91 3a 01 	lds	r24, 0x013A
 612:	89 17       	cp	r24, r25
 614:	e1 f3       	breq	.-8      	; 0x60e <uart_putchar+0xe>
	//cli();
	tx_buffer[i] = c;
 616:	e9 2f       	mov	r30, r25
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	ef 5e       	subi	r30, 0xEF	; 239
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	20 83       	st	Z, r18
	tx_buffer_head = i;
 620:	90 93 39 01 	sts	0x0139, r25
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<UDRIE1);
 624:	88 eb       	ldi	r24, 0xB8	; 184
 626:	80 93 c9 00 	sts	0x00C9, r24
	//sei();
}
 62a:	08 95       	ret

0000062c <__vector_24>:
	return RX_BUFFER_SIZE + head - tail;
}

// Transmit Interrupt
ISR(USART1_UDRE_vect)
{
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
 63e:	90 91 39 01 	lds	r25, 0x0139
 642:	80 91 3a 01 	lds	r24, 0x013A
 646:	98 17       	cp	r25, r24
 648:	21 f4       	brne	.+8      	; 0x652 <__vector_24+0x26>
		// buffer is empty, disable transmit interrupt
		UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
 64a:	88 e9       	ldi	r24, 0x98	; 152
 64c:	80 93 c9 00 	sts	0x00C9, r24
 650:	0f c0       	rjmp	.+30     	; 0x670 <__vector_24+0x44>
	} else {
		i = tx_buffer_tail + 1;
 652:	90 91 3a 01 	lds	r25, 0x013A
 656:	9f 5f       	subi	r25, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
 658:	98 32       	cpi	r25, 0x28	; 40
 65a:	08 f0       	brcs	.+2      	; 0x65e <__vector_24+0x32>
 65c:	90 e0       	ldi	r25, 0x00	; 0
		UDR1 = tx_buffer[i];
 65e:	e9 2f       	mov	r30, r25
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ef 5e       	subi	r30, 0xEF	; 239
 664:	fe 4f       	sbci	r31, 0xFE	; 254
 666:	80 81       	ld	r24, Z
 668:	80 93 ce 00 	sts	0x00CE, r24
		tx_buffer_tail = i;
 66c:	90 93 3a 01 	sts	0x013A, r25
	}
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <__vector_23>:

// Receive Interrupt
ISR(USART1_RX_vect)
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	ef 93       	push	r30
 694:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
 696:	20 91 ce 00 	lds	r18, 0x00CE
	i = rx_buffer_head + 1;
 69a:	90 91 7b 01 	lds	r25, 0x017B
 69e:	9f 5f       	subi	r25, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
 6a0:	90 34       	cpi	r25, 0x40	; 64
 6a2:	08 f0       	brcs	.+2      	; 0x6a6 <__vector_23+0x24>
 6a4:	90 e0       	ldi	r25, 0x00	; 0
	if (i != rx_buffer_tail) {
 6a6:	80 91 7c 01 	lds	r24, 0x017C
 6aa:	98 17       	cp	r25, r24
 6ac:	39 f0       	breq	.+14     	; 0x6bc <__vector_23+0x3a>
		rx_buffer[i] = c;
 6ae:	e9 2f       	mov	r30, r25
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	e5 5c       	subi	r30, 0xC5	; 197
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	20 83       	st	Z, r18
		rx_buffer_head = i;
 6b8:	90 93 7b 01 	sts	0x017B, r25
	}
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <ui2a>:
}

#endif

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
 6d0:	8f 92       	push	r8
 6d2:	9f 92       	push	r9
 6d4:	af 92       	push	r10
 6d6:	bf 92       	push	r11
 6d8:	cf 92       	push	r12
 6da:	df 92       	push	r13
 6dc:	ef 92       	push	r14
 6de:	ff 92       	push	r15
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	5c 01       	movw	r10, r24
 6ea:	7b 01       	movw	r14, r22
 6ec:	4a 01       	movw	r8, r20
 6ee:	69 01       	movw	r12, r18
 6f0:	c1 e0       	ldi	r28, 0x01	; 1
 6f2:	d0 e0       	ldi	r29, 0x00	; 0
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <ui2a+0x2e>
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
 6f6:	ce 01       	movw	r24, r28
 6f8:	b7 01       	movw	r22, r14
 6fa:	ba d2       	rcall	.+1396   	; 0xc70 <__mulhi3>
 6fc:	ec 01       	movw	r28, r24

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
 6fe:	c5 01       	movw	r24, r10
 700:	be 01       	movw	r22, r28
 702:	c8 d2       	rcall	.+1424   	; 0xc94 <__udivmodhi4>
 704:	6e 15       	cp	r22, r14
 706:	7f 05       	cpc	r23, r15
 708:	b0 f7       	brcc	.-20     	; 0x6f6 <ui2a+0x26>
 70a:	00 e0       	ldi	r16, 0x00	; 0
 70c:	10 e0       	ldi	r17, 0x00	; 0
 70e:	27 c0       	rjmp	.+78     	; 0x75e <ui2a+0x8e>
        d*=base;        
    while (d!=0) {
        int dgt = num / d;
 710:	c5 01       	movw	r24, r10
 712:	be 01       	movw	r22, r28
 714:	bf d2       	rcall	.+1406   	; 0xc94 <__udivmodhi4>
 716:	9b 01       	movw	r18, r22
        num%= d;
        d/=base;
 718:	ce 01       	movw	r24, r28
 71a:	b7 01       	movw	r22, r14
 71c:	bb d2       	rcall	.+1398   	; 0xc94 <__udivmodhi4>
 71e:	fb 01       	movw	r30, r22
        if (n || dgt>0 || d==0) {
 720:	01 15       	cp	r16, r1
 722:	11 05       	cpc	r17, r1
 724:	31 f4       	brne	.+12     	; 0x732 <ui2a+0x62>
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	1c f0       	brlt	.+6      	; 0x732 <ui2a+0x62>
 72c:	61 15       	cp	r22, r1
 72e:	71 05       	cpc	r23, r1
 730:	89 f4       	brne	.+34     	; 0x754 <ui2a+0x84>
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
 732:	2a 30       	cpi	r18, 0x0A	; 10
 734:	31 05       	cpc	r19, r1
 736:	14 f4       	brge	.+4      	; 0x73c <ui2a+0x6c>
 738:	80 e3       	ldi	r24, 0x30	; 48
 73a:	06 c0       	rjmp	.+12     	; 0x748 <ui2a+0x78>
 73c:	81 14       	cp	r8, r1
 73e:	91 04       	cpc	r9, r1
 740:	11 f4       	brne	.+4      	; 0x746 <ui2a+0x76>
 742:	87 e5       	ldi	r24, 0x57	; 87
 744:	01 c0       	rjmp	.+2      	; 0x748 <ui2a+0x78>
 746:	87 e3       	ldi	r24, 0x37	; 55
 748:	82 0f       	add	r24, r18
 74a:	d6 01       	movw	r26, r12
 74c:	8d 93       	st	X+, r24
 74e:	6d 01       	movw	r12, r26
            ++n;
 750:	0f 5f       	subi	r16, 0xFF	; 255
 752:	1f 4f       	sbci	r17, 0xFF	; 255
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
        int dgt = num / d;
        num%= d;
 754:	c5 01       	movw	r24, r10
 756:	be 01       	movw	r22, r28
 758:	9d d2       	rcall	.+1338   	; 0xc94 <__udivmodhi4>
 75a:	5c 01       	movw	r10, r24
 75c:	ef 01       	movw	r28, r30
{
    int n=0;
    unsigned int d=1;
    while (num/d >= base)
        d*=base;        
    while (d!=0) {
 75e:	20 97       	sbiw	r28, 0x00	; 0
 760:	b9 f6       	brne	.-82     	; 0x710 <ui2a+0x40>
        if (n || dgt>0 || d==0) {
            *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
            ++n;
        }
    }
    *bf=0;
 762:	f6 01       	movw	r30, r12
 764:	10 82       	st	Z, r1
}
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	df 90       	pop	r13
 774:	cf 90       	pop	r12
 776:	bf 90       	pop	r11
 778:	af 90       	pop	r10
 77a:	9f 90       	pop	r9
 77c:	8f 90       	pop	r8
 77e:	08 95       	ret

00000780 <putchw>:
    *nump=num;
    return ch;
}

static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	6c 01       	movw	r12, r24
 794:	7b 01       	movw	r14, r22
 796:	e8 01       	movw	r28, r16
    char fc=z? '0' : ' ';
 798:	22 23       	and	r18, r18
 79a:	19 f4       	brne	.+6      	; 0x7a2 <putchw+0x22>
 79c:	90 e2       	ldi	r25, 0x20	; 32
 79e:	b9 2e       	mov	r11, r25
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <putchw+0x26>
 7a2:	80 e3       	ldi	r24, 0x30	; 48
 7a4:	b8 2e       	mov	r11, r24
 7a6:	fe 01       	movw	r30, r28
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <putchw+0x2e>
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
        n--;
 7aa:	41 50       	subi	r20, 0x01	; 1
 7ac:	50 40       	sbci	r21, 0x00	; 0
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
    char fc=z? '0' : ' ';
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
 7ae:	81 91       	ld	r24, Z+
 7b0:	88 23       	and	r24, r24
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <putchw+0x38>
 7b4:	8a 01       	movw	r16, r20
 7b6:	0a c0       	rjmp	.+20     	; 0x7cc <putchw+0x4c>
 7b8:	14 16       	cp	r1, r20
 7ba:	15 06       	cpc	r1, r21
 7bc:	b4 f3       	brlt	.-20     	; 0x7aa <putchw+0x2a>
 7be:	fa cf       	rjmp	.-12     	; 0x7b4 <putchw+0x34>
        n--;
    while (n-- > 0) 
        putf(putp,fc);
 7c0:	c6 01       	movw	r24, r12
 7c2:	6b 2d       	mov	r22, r11
 7c4:	f7 01       	movw	r30, r14
 7c6:	09 95       	icall
 7c8:	01 50       	subi	r16, 0x01	; 1
 7ca:	10 40       	sbci	r17, 0x00	; 0
    char fc=z? '0' : ' ';
    char ch;
    char* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
 7cc:	10 16       	cp	r1, r16
 7ce:	11 06       	cpc	r1, r17
 7d0:	bc f3       	brlt	.-18     	; 0x7c0 <putchw+0x40>
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <putchw+0x5a>
        putf(putp,fc);
    while ((ch= *bf++))
        putf(putp,ch);
 7d4:	c6 01       	movw	r24, r12
 7d6:	f7 01       	movw	r30, r14
 7d8:	09 95       	icall
    char* p=bf;
    while (*p++ && n > 0)
        n--;
    while (n-- > 0) 
        putf(putp,fc);
    while ((ch= *bf++))
 7da:	69 91       	ld	r22, Y+
 7dc:	66 23       	and	r22, r22
 7de:	d1 f7       	brne	.-12     	; 0x7d4 <putchw+0x54>
        putf(putp,ch);
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	0f 91       	pop	r16
 7e8:	ff 90       	pop	r15
 7ea:	ef 90       	pop	r14
 7ec:	df 90       	pop	r13
 7ee:	cf 90       	pop	r12
 7f0:	bf 90       	pop	r11
 7f2:	08 95       	ret

000007f4 <tfp_format>:

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
 7f4:	2f 92       	push	r2
 7f6:	3f 92       	push	r3
 7f8:	4f 92       	push	r4
 7fa:	5f 92       	push	r5
 7fc:	6f 92       	push	r6
 7fe:	7f 92       	push	r7
 800:	8f 92       	push	r8
 802:	9f 92       	push	r9
 804:	af 92       	push	r10
 806:	bf 92       	push	r11
 808:	cf 92       	push	r12
 80a:	df 92       	push	r13
 80c:	ef 92       	push	r14
 80e:	ff 92       	push	r15
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	2c 97       	sbiw	r28, 0x0c	; 12
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
 828:	2c 01       	movw	r4, r24
 82a:	3b 01       	movw	r6, r22
 82c:	4a 01       	movw	r8, r20
 82e:	69 01       	movw	r12, r18
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                        i2a(va_arg(va, int),bf);
                    putchw(putp,putf,w,lz,bf);
 830:	1e 01       	movw	r2, r28
 832:	08 94       	sec
 834:	21 1c       	adc	r2, r1
 836:	31 1c       	adc	r3, r1
 838:	c2 c0       	rjmp	.+388    	; 0x9be <tfp_format+0x1ca>
    char bf[12];
    
    char ch;
    
    
    while ((ch=*(fmt++))) {
 83a:	08 94       	sec
 83c:	81 1c       	adc	r8, r1
 83e:	91 1c       	adc	r9, r1
        if (ch!='%') 
 840:	65 32       	cpi	r22, 0x25	; 37
 842:	11 f0       	breq	.+4      	; 0x848 <tfp_format+0x54>
            putf(putp,ch);
 844:	c2 01       	movw	r24, r4
 846:	b9 c0       	rjmp	.+370    	; 0x9ba <tfp_format+0x1c6>
            char lz=0;
#ifdef  PRINTF_LONG_SUPPORT
            char lng=0;
#endif
            int w=0;
            ch=*(fmt++);
 848:	f4 01       	movw	r30, r8
 84a:	71 91       	ld	r23, Z+
 84c:	4f 01       	movw	r8, r30
            if (ch=='0') {
 84e:	70 33       	cpi	r23, 0x30	; 48
 850:	11 f0       	breq	.+4      	; 0x856 <tfp_format+0x62>
 852:	10 e0       	ldi	r17, 0x00	; 0
 854:	03 c0       	rjmp	.+6      	; 0x85c <tfp_format+0x68>
                ch=*(fmt++);
 856:	71 91       	ld	r23, Z+
 858:	4f 01       	movw	r8, r30
 85a:	11 e0       	ldi	r17, 0x01	; 1
                lz=1;
            }
            if (ch>='0' && ch<='9') {
 85c:	87 2f       	mov	r24, r23
 85e:	80 53       	subi	r24, 0x30	; 48
 860:	8a 30       	cpi	r24, 0x0A	; 10
 862:	18 f0       	brcs	.+6      	; 0x86a <tfp_format+0x76>
 864:	aa 24       	eor	r10, r10
 866:	bb 24       	eor	r11, r11
 868:	2c c0       	rjmp	.+88     	; 0x8c2 <tfp_format+0xce>
 86a:	aa 24       	eor	r10, r10
 86c:	bb 24       	eor	r11, r11
 86e:	0d c0       	rjmp	.+26     	; 0x88a <tfp_format+0x96>
{
    char* p= *src;
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
        if (digit>base) break;
 870:	2b 30       	cpi	r18, 0x0B	; 11
 872:	31 05       	cpc	r19, r1
 874:	34 f5       	brge	.+76     	; 0x8c2 <tfp_format+0xce>
        num=num*base+digit;
 876:	c5 01       	movw	r24, r10
 878:	6a e0       	ldi	r22, 0x0A	; 10
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	f9 d1       	rcall	.+1010   	; 0xc70 <__mulhi3>
 87e:	59 01       	movw	r10, r18
 880:	a8 0e       	add	r10, r24
 882:	b9 1e       	adc	r11, r25
        ch=*p++;
 884:	f4 01       	movw	r30, r8
 886:	71 91       	ld	r23, Z+
 888:	4f 01       	movw	r8, r30
    ui2a(num,10,0,bf);
}

static int a2d(char ch)
{
    if (ch>='0' && ch<='9') 
 88a:	87 2f       	mov	r24, r23
 88c:	80 53       	subi	r24, 0x30	; 48
 88e:	8a 30       	cpi	r24, 0x0A	; 10
 890:	28 f4       	brcc	.+10     	; 0x89c <tfp_format+0xa8>
        return ch-'0';
 892:	27 2f       	mov	r18, r23
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	20 53       	subi	r18, 0x30	; 48
 898:	30 40       	sbci	r19, 0x00	; 0
 89a:	11 c0       	rjmp	.+34     	; 0x8be <tfp_format+0xca>
    else if (ch>='a' && ch<='f')
 89c:	87 2f       	mov	r24, r23
 89e:	81 56       	subi	r24, 0x61	; 97
 8a0:	86 30       	cpi	r24, 0x06	; 6
 8a2:	28 f4       	brcc	.+10     	; 0x8ae <tfp_format+0xba>
        return ch-'a'+10;
 8a4:	27 2f       	mov	r18, r23
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	27 55       	subi	r18, 0x57	; 87
 8aa:	30 40       	sbci	r19, 0x00	; 0
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <tfp_format+0xca>
    else if (ch>='A' && ch<='F')
 8ae:	87 2f       	mov	r24, r23
 8b0:	81 54       	subi	r24, 0x41	; 65
 8b2:	86 30       	cpi	r24, 0x06	; 6
 8b4:	30 f4       	brcc	.+12     	; 0x8c2 <tfp_format+0xce>
        return ch-'A'+10;
 8b6:	27 2f       	mov	r18, r23
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	27 53       	subi	r18, 0x37	; 55
 8bc:	30 40       	sbci	r19, 0x00	; 0
static char a2i(char ch, char** src,int base,int* nump)
{
    char* p= *src;
    int num=0;
    int digit;
    while ((digit=a2d(ch))>=0) {
 8be:	37 ff       	sbrs	r19, 7
 8c0:	d7 cf       	rjmp	.-82     	; 0x870 <tfp_format+0x7c>
            if (ch=='l') {
                ch=*(fmt++);
                lng=1;
            }
#endif
            switch (ch) {
 8c2:	74 36       	cpi	r23, 0x64	; 100
 8c4:	39 f1       	breq	.+78     	; 0x914 <tfp_format+0x120>
 8c6:	75 36       	cpi	r23, 0x65	; 101
 8c8:	80 f4       	brcc	.+32     	; 0x8ea <tfp_format+0xf6>
 8ca:	78 35       	cpi	r23, 0x58	; 88
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <tfp_format+0xdc>
 8ce:	42 c0       	rjmp	.+132    	; 0x954 <tfp_format+0x160>
 8d0:	79 35       	cpi	r23, 0x59	; 89
 8d2:	38 f4       	brcc	.+14     	; 0x8e2 <tfp_format+0xee>
 8d4:	77 23       	and	r23, r23
 8d6:	09 f4       	brne	.+2      	; 0x8da <tfp_format+0xe6>
 8d8:	77 c0       	rjmp	.+238    	; 0x9c8 <tfp_format+0x1d4>
 8da:	75 32       	cpi	r23, 0x25	; 37
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <tfp_format+0xec>
 8de:	6f c0       	rjmp	.+222    	; 0x9be <tfp_format+0x1ca>
 8e0:	6a c0       	rjmp	.+212    	; 0x9b6 <tfp_format+0x1c2>
 8e2:	73 36       	cpi	r23, 0x63	; 99
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <tfp_format+0xf4>
 8e6:	6b c0       	rjmp	.+214    	; 0x9be <tfp_format+0x1ca>
 8e8:	4d c0       	rjmp	.+154    	; 0x984 <tfp_format+0x190>
 8ea:	75 37       	cpi	r23, 0x75	; 117
 8ec:	31 f0       	breq	.+12     	; 0x8fa <tfp_format+0x106>
 8ee:	78 37       	cpi	r23, 0x78	; 120
 8f0:	89 f1       	breq	.+98     	; 0x954 <tfp_format+0x160>
 8f2:	73 37       	cpi	r23, 0x73	; 115
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <tfp_format+0x104>
 8f6:	63 c0       	rjmp	.+198    	; 0x9be <tfp_format+0x1ca>
 8f8:	4f c0       	rjmp	.+158    	; 0x998 <tfp_format+0x1a4>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),10,0,bf);
                    else
#endif
                        ui2a(va_arg(va, unsigned int),10,0,bf);
 8fa:	42 e0       	ldi	r20, 0x02	; 2
 8fc:	e4 2e       	mov	r14, r20
 8fe:	f1 2c       	mov	r15, r1
 900:	ec 0c       	add	r14, r12
 902:	fd 1c       	adc	r15, r13
 904:	f6 01       	movw	r30, r12
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	6a e0       	ldi	r22, 0x0A	; 10
 90c:	70 e0       	ldi	r23, 0x00	; 0
 90e:	40 e0       	ldi	r20, 0x00	; 0
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	30 c0       	rjmp	.+96     	; 0x974 <tfp_format+0x180>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                        i2a(va_arg(va, int),bf);
 914:	f6 01       	movw	r30, r12
 916:	40 81       	ld	r20, Z
 918:	51 81       	ldd	r21, Z+1	; 0x01
    *bf=0;
}

static void i2a (int num, char * bf)
{
    if (num<0) {
 91a:	57 fd       	sbrc	r21, 7
 91c:	02 c0       	rjmp	.+4      	; 0x922 <tfp_format+0x12e>
 91e:	c1 01       	movw	r24, r2
 920:	07 c0       	rjmp	.+14     	; 0x930 <tfp_format+0x13c>
        num=-num;
 922:	50 95       	com	r21
 924:	41 95       	neg	r20
 926:	5f 4f       	sbci	r21, 0xFF	; 255
        *bf++ = '-';
 928:	fd e2       	ldi	r31, 0x2D	; 45
 92a:	f9 83       	std	Y+1, r31	; 0x01
 92c:	ce 01       	movw	r24, r28
 92e:	02 96       	adiw	r24, 0x02	; 2
 930:	9c 01       	movw	r18, r24
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                        i2a(va_arg(va, int),bf);
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	c8 0e       	add	r12, r24
 938:	d9 1e       	adc	r13, r25
{
    if (num<0) {
        num=-num;
        *bf++ = '-';
    }
    ui2a(num,10,0,bf);
 93a:	ca 01       	movw	r24, r20
 93c:	6a e0       	ldi	r22, 0x0A	; 10
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	40 e0       	ldi	r20, 0x00	; 0
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	c5 de       	rcall	.-630    	; 0x6d0 <ui2a>
                    if (lng)
                        li2a(va_arg(va, unsigned long int),bf);
                    else
#endif
                        i2a(va_arg(va, int),bf);
                    putchw(putp,putf,w,lz,bf);
 946:	c2 01       	movw	r24, r4
 948:	b3 01       	movw	r22, r6
 94a:	a5 01       	movw	r20, r10
 94c:	21 2f       	mov	r18, r17
 94e:	81 01       	movw	r16, r2
 950:	17 df       	rcall	.-466    	; 0x780 <putchw>
 952:	35 c0       	rjmp	.+106    	; 0x9be <tfp_format+0x1ca>
#ifdef  PRINTF_LONG_SUPPORT
                    if (lng)
                        uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
                    else
#endif
                        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
 954:	32 e0       	ldi	r19, 0x02	; 2
 956:	e3 2e       	mov	r14, r19
 958:	f1 2c       	mov	r15, r1
 95a:	ec 0c       	add	r14, r12
 95c:	fd 1c       	adc	r15, r13
 95e:	f6 01       	movw	r30, r12
 960:	80 81       	ld	r24, Z
 962:	91 81       	ldd	r25, Z+1	; 0x01
 964:	40 e0       	ldi	r20, 0x00	; 0
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	78 35       	cpi	r23, 0x58	; 88
 96a:	11 f4       	brne	.+4      	; 0x970 <tfp_format+0x17c>
 96c:	41 e0       	ldi	r20, 0x01	; 1
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	60 e1       	ldi	r22, 0x10	; 16
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	91 01       	movw	r18, r2
 976:	ac de       	rcall	.-680    	; 0x6d0 <ui2a>
                    putchw(putp,putf,w,lz,bf);
 978:	c2 01       	movw	r24, r4
 97a:	b3 01       	movw	r22, r6
 97c:	a5 01       	movw	r20, r10
 97e:	21 2f       	mov	r18, r17
 980:	81 01       	movw	r16, r2
 982:	16 c0       	rjmp	.+44     	; 0x9b0 <tfp_format+0x1bc>
                    break;
                case 'c' : 
                    putf(putp,(char)(va_arg(va, int)));
 984:	86 01       	movw	r16, r12
 986:	0e 5f       	subi	r16, 0xFE	; 254
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	c2 01       	movw	r24, r4
 98c:	f6 01       	movw	r30, r12
 98e:	60 81       	ld	r22, Z
 990:	f3 01       	movw	r30, r6
 992:	09 95       	icall
 994:	68 01       	movw	r12, r16
 996:	13 c0       	rjmp	.+38     	; 0x9be <tfp_format+0x1ca>
                    break;
                case 's' : 
                    putchw(putp,putf,w,0,va_arg(va, char*));
 998:	22 e0       	ldi	r18, 0x02	; 2
 99a:	e2 2e       	mov	r14, r18
 99c:	f1 2c       	mov	r15, r1
 99e:	ec 0c       	add	r14, r12
 9a0:	fd 1c       	adc	r15, r13
 9a2:	f6 01       	movw	r30, r12
 9a4:	00 81       	ld	r16, Z
 9a6:	11 81       	ldd	r17, Z+1	; 0x01
 9a8:	c2 01       	movw	r24, r4
 9aa:	b3 01       	movw	r22, r6
 9ac:	a5 01       	movw	r20, r10
 9ae:	20 e0       	ldi	r18, 0x00	; 0
 9b0:	e7 de       	rcall	.-562    	; 0x780 <putchw>
 9b2:	67 01       	movw	r12, r14
 9b4:	04 c0       	rjmp	.+8      	; 0x9be <tfp_format+0x1ca>
                    break;
                case '%' :
                    putf(putp,ch);
 9b6:	c2 01       	movw	r24, r4
 9b8:	65 e2       	ldi	r22, 0x25	; 37
 9ba:	f3 01       	movw	r30, r6
 9bc:	09 95       	icall
    char bf[12];
    
    char ch;
    
    
    while ((ch=*(fmt++))) {
 9be:	f4 01       	movw	r30, r8
 9c0:	60 81       	ld	r22, Z
 9c2:	66 23       	and	r22, r22
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <tfp_format+0x1d4>
 9c6:	39 cf       	rjmp	.-398    	; 0x83a <tfp_format+0x46>
                    break;
            }
        }
    }
abort:;
}
 9c8:	2c 96       	adiw	r28, 0x0c	; 12
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	1f 91       	pop	r17
 9da:	0f 91       	pop	r16
 9dc:	ff 90       	pop	r15
 9de:	ef 90       	pop	r14
 9e0:	df 90       	pop	r13
 9e2:	cf 90       	pop	r12
 9e4:	bf 90       	pop	r11
 9e6:	af 90       	pop	r10
 9e8:	9f 90       	pop	r9
 9ea:	8f 90       	pop	r8
 9ec:	7f 90       	pop	r7
 9ee:	6f 90       	pop	r6
 9f0:	5f 90       	pop	r5
 9f2:	4f 90       	pop	r4
 9f4:	3f 90       	pop	r3
 9f6:	2f 90       	pop	r2
 9f8:	08 95       	ret

000009fa <init_printf>:


void init_printf(void* putp,void (*putf) (void*,char))
{
    stdout_putf=putf;
 9fa:	70 93 7e 01 	sts	0x017E, r23
 9fe:	60 93 7d 01 	sts	0x017D, r22
    stdout_putp=putp;
 a02:	90 93 80 01 	sts	0x0180, r25
 a06:	80 93 7f 01 	sts	0x017F, r24
}
 a0a:	08 95       	ret

00000a0c <tfp_printf>:

void tfp_printf(char *fmt, ...)
{
 a0c:	df 93       	push	r29
 a0e:	cf 93       	push	r28
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	fe 01       	movw	r30, r28
 a16:	35 96       	adiw	r30, 0x05	; 5
 a18:	41 91       	ld	r20, Z+
 a1a:	51 91       	ld	r21, Z+
    va_list va;
    va_start(va,fmt);
    tfp_format(stdout_putp,stdout_putf,fmt,va);
 a1c:	60 91 7d 01 	lds	r22, 0x017D
 a20:	70 91 7e 01 	lds	r23, 0x017E
 a24:	80 91 7f 01 	lds	r24, 0x017F
 a28:	90 91 80 01 	lds	r25, 0x0180
 a2c:	9f 01       	movw	r18, r30
 a2e:	e2 de       	rcall	.-572    	; 0x7f4 <tfp_format>
    va_end(va);
}
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <timer1_init>:
// about - 8 and 16 MHz - this doesn't lose precision.)
#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) >> 3)
#define FRACT_MAX (1000 >> 3)

void timer1_init(void){
    TCCR1A |= (1 << WGM12); //Setup CTC mode?
 a36:	e0 e8       	ldi	r30, 0x80	; 128
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
 a3c:	88 60       	ori	r24, 0x08	; 8
 a3e:	80 83       	st	Z, r24
    TCCR1B = (1 << CS11) | (1 << CS10);
 a40:	83 e0       	ldi	r24, 0x03	; 3
 a42:	80 93 81 00 	sts	0x0081, r24
    TIMSK1 = (1 << OCIE1A);
 a46:	82 e0       	ldi	r24, 0x02	; 2
 a48:	80 93 6f 00 	sts	0x006F, r24
    OCR1A   = 32000;
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	9d e7       	ldi	r25, 0x7D	; 125
 a50:	90 93 89 00 	sts	0x0089, r25
 a54:	80 93 88 00 	sts	0x0088, r24
}
 a58:	08 95       	ret

00000a5a <__vector_15>:
    sei();
    
    DDRB |= (1<<6); //port B6 as output.
}

ISR(TIMER1_COMPA_vect){
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	8f 93       	push	r24
 a66:	9f 93       	push	r25
    OCR1A = 32000;
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	9d e7       	ldi	r25, 0x7D	; 125
 a6c:	90 93 89 00 	sts	0x0089, r25
 a70:	80 93 88 00 	sts	0x0088, r24
    PORTD ^= 0xff;
 a74:	8b b1       	in	r24, 0x0b	; 11
 a76:	80 95       	com	r24
 a78:	8b b9       	out	0x0b, r24	; 11
}
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	0f 90       	pop	r0
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	0f 90       	pop	r0
 a84:	1f 90       	pop	r1
 a86:	18 95       	reti

00000a88 <__vector_21>:

ISR(TIMER0_OVF_vect)
{
 a88:	1f 92       	push	r1
 a8a:	0f 92       	push	r0
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	0f 92       	push	r0
 a90:	11 24       	eor	r1, r1
 a92:	8f 93       	push	r24
 a94:	9f 93       	push	r25
 a96:	af 93       	push	r26
 a98:	bf 93       	push	r27
	timer0_overflow_count++;
 a9a:	80 91 81 01 	lds	r24, 0x0181
 a9e:	90 91 82 01 	lds	r25, 0x0182
 aa2:	a0 91 83 01 	lds	r26, 0x0183
 aa6:	b0 91 84 01 	lds	r27, 0x0184
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	a1 1d       	adc	r26, r1
 aae:	b1 1d       	adc	r27, r1
 ab0:	80 93 81 01 	sts	0x0181, r24
 ab4:	90 93 82 01 	sts	0x0182, r25
 ab8:	a0 93 83 01 	sts	0x0183, r26
 abc:	b0 93 84 01 	sts	0x0184, r27
    if (PORTB & (1<<6)) { PORTB &= ~(1<<6); } //off
 ac0:	2e 9b       	sbis	0x05, 6	; 5
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <__vector_21+0x40>
 ac4:	2e 98       	cbi	0x05, 6	; 5
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <__vector_21+0x42>
    else { PORTB |= (1<<6); } //on
 ac8:	2e 9a       	sbi	0x05, 6	; 5
}
 aca:	bf 91       	pop	r27
 acc:	af 91       	pop	r26
 ace:	9f 91       	pop	r25
 ad0:	8f 91       	pop	r24
 ad2:	0f 90       	pop	r0
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	0f 90       	pop	r0
 ad8:	1f 90       	pop	r1
 ada:	18 95       	reti

00000adc <tics>:

unsigned long tics(void) {
	unsigned long m;
    uint8_t counter;
    
	cli();
 adc:	f8 94       	cli
	m = timer0_overflow_count;
 ade:	20 91 81 01 	lds	r18, 0x0181
 ae2:	30 91 82 01 	lds	r19, 0x0182
 ae6:	40 91 83 01 	lds	r20, 0x0183
 aea:	50 91 84 01 	lds	r21, 0x0184
    counter = TCNT0;
 aee:	86 b5       	in	r24, 0x26	; 38
	sei();
 af0:	78 94       	sei
 af2:	54 2f       	mov	r21, r20
 af4:	43 2f       	mov	r20, r19
 af6:	32 2f       	mov	r19, r18
 af8:	22 27       	eor	r18, r18
 afa:	28 0f       	add	r18, r24
 afc:	31 1d       	adc	r19, r1
 afe:	41 1d       	adc	r20, r1
 b00:	51 1d       	adc	r21, r1
	return (m<<8)+counter;
}
 b02:	b9 01       	movw	r22, r18
 b04:	ca 01       	movw	r24, r20
 b06:	08 95       	ret

00000b08 <__vector_9>:
#define tic_timing_to_us(x) REAL_TIMER_FREQ //TODO: finish me.
/* 
 * interrupt function runs when interrupt port 0 (which has P8) is changed
 * enabled by PCICR with individual ports enabled with PCMSK0
 */
ISR(PCINT0_vect) {
 b08:	1f 92       	push	r1
 b0a:	0f 92       	push	r0
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	0f 92       	push	r0
 b10:	11 24       	eor	r1, r1
 b12:	6f 92       	push	r6
 b14:	7f 92       	push	r7
 b16:	8f 92       	push	r8
 b18:	9f 92       	push	r9
 b1a:	af 92       	push	r10
 b1c:	bf 92       	push	r11
 b1e:	cf 92       	push	r12
 b20:	df 92       	push	r13
 b22:	ef 92       	push	r14
 b24:	ff 92       	push	r15
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	2f 93       	push	r18
 b2c:	3f 93       	push	r19
 b2e:	4f 93       	push	r20
 b30:	5f 93       	push	r21
 b32:	6f 93       	push	r22
 b34:	7f 93       	push	r23
 b36:	8f 93       	push	r24
 b38:	9f 93       	push	r25
 b3a:	af 93       	push	r26
 b3c:	bf 93       	push	r27
 b3e:	ef 93       	push	r30
 b40:	ff 93       	push	r31
    if ( !(PINB & (1<<4))) {  // Pulse trailing edge for port B pin 4, B4. CHANGE ME if you change ports.
 b42:	1c 99       	sbic	0x03, 4	; 3
 b44:	78 c0       	rjmp	.+240    	; 0xc36 <__vector_9+0x12e>
        unsigned long m = timer0_overflow_count;
 b46:	60 90 81 01 	lds	r6, 0x0181
 b4a:	70 90 82 01 	lds	r7, 0x0182
 b4e:	80 90 83 01 	lds	r8, 0x0183
 b52:	90 90 84 01 	lds	r9, 0x0184
        unsigned char t0 = TCNT0;
 b56:	76 b5       	in	r23, 0x26	; 38
        
        if ((TIFR0 & _BV(TOV0)) && (t0 < 255)) { m++; } //fixes strange error, thanks arduino core's micros()!
 b58:	a8 9b       	sbis	0x15, 0	; 21
 b5a:	07 c0       	rjmp	.+14     	; 0xb6a <__vector_9+0x62>
 b5c:	7f 3f       	cpi	r23, 0xFF	; 255
 b5e:	29 f0       	breq	.+10     	; 0xb6a <__vector_9+0x62>
 b60:	08 94       	sec
 b62:	61 1c       	adc	r6, r1
 b64:	71 1c       	adc	r7, r1
 b66:	81 1c       	adc	r8, r1
 b68:	91 1c       	adc	r9, r1

        if ((m - pulse_start_ms) > (30)) {  //found sync pulse! TODO: change '30' to be dependent on REAL_TIMER_FREQ
 b6a:	80 91 86 01 	lds	r24, 0x0186
 b6e:	90 91 87 01 	lds	r25, 0x0187
 b72:	a0 91 88 01 	lds	r26, 0x0188
 b76:	b0 91 89 01 	lds	r27, 0x0189
 b7a:	a4 01       	movw	r20, r8
 b7c:	93 01       	movw	r18, r6
 b7e:	28 1b       	sub	r18, r24
 b80:	39 0b       	sbc	r19, r25
 b82:	4a 0b       	sbc	r20, r26
 b84:	5b 0b       	sbc	r21, r27
 b86:	2f 31       	cpi	r18, 0x1F	; 31
 b88:	31 05       	cpc	r19, r1
 b8a:	41 05       	cpc	r20, r1
 b8c:	51 05       	cpc	r21, r1
 b8e:	40 f0       	brcs	.+16     	; 0xba0 <__vector_9+0x98>
            position = 0; 
 b90:	10 92 0c 01 	sts	0x010C, r1
            resets += 1;
 b94:	80 91 85 01 	lds	r24, 0x0185
 b98:	8f 5f       	subi	r24, 0xFF	; 255
 b9a:	80 93 85 01 	sts	0x0185, r24
 b9e:	41 c0       	rjmp	.+130    	; 0xc22 <__vector_9+0x11a>
        }
        else if (position < 0) {  //not found a sync pulse yet
 ba0:	80 91 0c 01 	lds	r24, 0x010C
 ba4:	87 fd       	sbrc	r24, 7
 ba6:	47 c0       	rjmp	.+142    	; 0xc36 <__vector_9+0x12e>
            return; 
        }
        else {  //otherwise, increment position and record data!
            if (position >= NUM_CHANNELS_TO_RECIEVE) { return; }
 ba8:	80 91 0c 01 	lds	r24, 0x010C
 bac:	86 30       	cpi	r24, 0x06	; 6
 bae:	0c f0       	brlt	.+2      	; 0xbb2 <__vector_9+0xaa>
 bb0:	42 c0       	rjmp	.+132    	; 0xc36 <__vector_9+0x12e>
            timings[position++] = ((m<<8)|t0) - ((pulse_start_ms<<8) | pulse_start_t0);
 bb2:	60 91 0c 01 	lds	r22, 0x010C
 bb6:	e6 2f       	mov	r30, r22
 bb8:	ff 27       	eor	r31, r31
 bba:	e7 fd       	sbrc	r30, 7
 bbc:	f0 95       	com	r31
 bbe:	a0 90 86 01 	lds	r10, 0x0186
 bc2:	b0 90 87 01 	lds	r11, 0x0187
 bc6:	c0 90 88 01 	lds	r12, 0x0188
 bca:	d0 90 89 01 	lds	r13, 0x0189
 bce:	20 91 8a 01 	lds	r18, 0x018A
 bd2:	18 2d       	mov	r17, r8
 bd4:	07 2d       	mov	r16, r7
 bd6:	f6 2c       	mov	r15, r6
 bd8:	ee 24       	eor	r14, r14
 bda:	87 2f       	mov	r24, r23
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	a0 e0       	ldi	r26, 0x00	; 0
 be0:	b0 e0       	ldi	r27, 0x00	; 0
 be2:	e8 2a       	or	r14, r24
 be4:	f9 2a       	or	r15, r25
 be6:	0a 2b       	or	r16, r26
 be8:	1b 2b       	or	r17, r27
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	40 e0       	ldi	r20, 0x00	; 0
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	dc 2c       	mov	r13, r12
 bf2:	cb 2c       	mov	r12, r11
 bf4:	ba 2c       	mov	r11, r10
 bf6:	aa 24       	eor	r10, r10
 bf8:	2a 29       	or	r18, r10
 bfa:	3b 29       	or	r19, r11
 bfc:	4c 29       	or	r20, r12
 bfe:	5d 29       	or	r21, r13
 c00:	e2 1a       	sub	r14, r18
 c02:	f3 0a       	sbc	r15, r19
 c04:	04 0b       	sbc	r16, r20
 c06:	15 0b       	sbc	r17, r21
 c08:	ee 0f       	add	r30, r30
 c0a:	ff 1f       	adc	r31, r31
 c0c:	ee 0f       	add	r30, r30
 c0e:	ff 1f       	adc	r31, r31
 c10:	e5 57       	subi	r30, 0x75	; 117
 c12:	fe 4f       	sbci	r31, 0xFE	; 254
 c14:	e0 82       	st	Z, r14
 c16:	f1 82       	std	Z+1, r15	; 0x01
 c18:	02 83       	std	Z+2, r16	; 0x02
 c1a:	13 83       	std	Z+3, r17	; 0x03
 c1c:	6f 5f       	subi	r22, 0xFF	; 255
 c1e:	60 93 0c 01 	sts	0x010C, r22
        }
        pulse_start_ms = m;
 c22:	60 92 86 01 	sts	0x0186, r6
 c26:	70 92 87 01 	sts	0x0187, r7
 c2a:	80 92 88 01 	sts	0x0188, r8
 c2e:	90 92 89 01 	sts	0x0189, r9
        pulse_start_t0 = t0;
 c32:	70 93 8a 01 	sts	0x018A, r23
	}
}
 c36:	ff 91       	pop	r31
 c38:	ef 91       	pop	r30
 c3a:	bf 91       	pop	r27
 c3c:	af 91       	pop	r26
 c3e:	9f 91       	pop	r25
 c40:	8f 91       	pop	r24
 c42:	7f 91       	pop	r23
 c44:	6f 91       	pop	r22
 c46:	5f 91       	pop	r21
 c48:	4f 91       	pop	r20
 c4a:	3f 91       	pop	r19
 c4c:	2f 91       	pop	r18
 c4e:	1f 91       	pop	r17
 c50:	0f 91       	pop	r16
 c52:	ff 90       	pop	r15
 c54:	ef 90       	pop	r14
 c56:	df 90       	pop	r13
 c58:	cf 90       	pop	r12
 c5a:	bf 90       	pop	r11
 c5c:	af 90       	pop	r10
 c5e:	9f 90       	pop	r9
 c60:	8f 90       	pop	r8
 c62:	7f 90       	pop	r7
 c64:	6f 90       	pop	r6
 c66:	0f 90       	pop	r0
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	0f 90       	pop	r0
 c6c:	1f 90       	pop	r1
 c6e:	18 95       	reti

00000c70 <__mulhi3>:
 c70:	55 27       	eor	r21, r21
 c72:	00 24       	eor	r0, r0

00000c74 <__mulhi3_loop>:
 c74:	80 ff       	sbrs	r24, 0
 c76:	02 c0       	rjmp	.+4      	; 0xc7c <__mulhi3_skip1>
 c78:	06 0e       	add	r0, r22
 c7a:	57 1f       	adc	r21, r23

00000c7c <__mulhi3_skip1>:
 c7c:	66 0f       	add	r22, r22
 c7e:	77 1f       	adc	r23, r23
 c80:	61 15       	cp	r22, r1
 c82:	71 05       	cpc	r23, r1
 c84:	21 f0       	breq	.+8      	; 0xc8e <__mulhi3_exit>
 c86:	96 95       	lsr	r25
 c88:	87 95       	ror	r24
 c8a:	00 97       	sbiw	r24, 0x00	; 0
 c8c:	99 f7       	brne	.-26     	; 0xc74 <__mulhi3_loop>

00000c8e <__mulhi3_exit>:
 c8e:	95 2f       	mov	r25, r21
 c90:	80 2d       	mov	r24, r0
 c92:	08 95       	ret

00000c94 <__udivmodhi4>:
 c94:	aa 1b       	sub	r26, r26
 c96:	bb 1b       	sub	r27, r27
 c98:	51 e1       	ldi	r21, 0x11	; 17
 c9a:	07 c0       	rjmp	.+14     	; 0xcaa <__udivmodhi4_ep>

00000c9c <__udivmodhi4_loop>:
 c9c:	aa 1f       	adc	r26, r26
 c9e:	bb 1f       	adc	r27, r27
 ca0:	a6 17       	cp	r26, r22
 ca2:	b7 07       	cpc	r27, r23
 ca4:	10 f0       	brcs	.+4      	; 0xcaa <__udivmodhi4_ep>
 ca6:	a6 1b       	sub	r26, r22
 ca8:	b7 0b       	sbc	r27, r23

00000caa <__udivmodhi4_ep>:
 caa:	88 1f       	adc	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	5a 95       	dec	r21
 cb0:	a9 f7       	brne	.-22     	; 0xc9c <__udivmodhi4_loop>
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	bc 01       	movw	r22, r24
 cb8:	cd 01       	movw	r24, r26
 cba:	08 95       	ret

00000cbc <__udivmodsi4>:
 cbc:	a1 e2       	ldi	r26, 0x21	; 33
 cbe:	1a 2e       	mov	r1, r26
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	fd 01       	movw	r30, r26
 cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__udivmodsi4_ep>

00000cc8 <__udivmodsi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	ee 1f       	adc	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	a2 17       	cp	r26, r18
 cd2:	b3 07       	cpc	r27, r19
 cd4:	e4 07       	cpc	r30, r20
 cd6:	f5 07       	cpc	r31, r21
 cd8:	20 f0       	brcs	.+8      	; 0xce2 <__udivmodsi4_ep>
 cda:	a2 1b       	sub	r26, r18
 cdc:	b3 0b       	sbc	r27, r19
 cde:	e4 0b       	sbc	r30, r20
 ce0:	f5 0b       	sbc	r31, r21

00000ce2 <__udivmodsi4_ep>:
 ce2:	66 1f       	adc	r22, r22
 ce4:	77 1f       	adc	r23, r23
 ce6:	88 1f       	adc	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	1a 94       	dec	r1
 cec:	69 f7       	brne	.-38     	; 0xcc8 <__udivmodsi4_loop>
 cee:	60 95       	com	r22
 cf0:	70 95       	com	r23
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	9b 01       	movw	r18, r22
 cf8:	ac 01       	movw	r20, r24
 cfa:	bd 01       	movw	r22, r26
 cfc:	cf 01       	movw	r24, r30
 cfe:	08 95       	ret

00000d00 <_exit>:
 d00:	f8 94       	cli

00000d02 <__stop_program>:
 d02:	ff cf       	rjmp	.-2      	; 0xd02 <__stop_program>
